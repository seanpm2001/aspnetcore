// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.AspNetCore.Components.Endpoints.Tests;

public class CompileTimeCreationTests : ComponentEndpointsGeneratorTestBase
{
    protected override bool IsGeneratorEnabled { get; } = true;

    [Fact]
    public async Task CanRunComponentEndpointsGenerator()
    {
        var (transitive, transitiveBytes) = await CreateClassLibraryAsync(
            "TransitiveDependency",
            TestComponent("TransitiveDependency", "TransitiveDependencyComponent"));

        var (library, libraryBytes) = await CreateClassLibraryAsync(
            "DirectDependency",
            TestComponent(
                "DirectDependency",
                "Counter",
                "[Route(\"/dependency\")]",
                "[RenderModeServer(prerender: true)]"),
            new MetadataReference[] { transitive });

        var project = CreateProject("UnitedApp", new MetadataReference[] { library, transitive });

        project = project.AddDocument(
            "App.razor.cs",
            SourceText.From(AppComponent("UnitedApp"))).Project;

        project = project.AddDocument(
            "Program.cs",
            SourceText.From(GetProgram("UnitedApp"))).Project;

        project = project.WithCompilationOptions(new CSharpCompilationOptions(OutputKind.ConsoleApplication)
            .WithNullableContextOptions(NullableContextOptions.Enable));

        var (generatorRunResult, compilation) = await RunGeneratorAsync(TestComponent("MyApp", "MyAppComponent", "[Route(\"/app\")]"), project);
        var results = Assert.IsType<GeneratorRunResult>(generatorRunResult);
        Assert.Empty(results.Diagnostics);
        await VerifyAgainstBaselineUsingFile(compilation);

        var server = GetTestServer(compilation, transitiveBytes, libraryBytes);
        Assert.NotNull(server);
        var client = server.CreateClient();

        var dependency = await client.GetStringAsync("/dependency");
        Assert.Contains("<h1>Counter</h1>", dependency);

        var app = await client.GetStringAsync("/app");
        Assert.Contains("<h1>MyAppComponent</h1>", app);
    }

    private string GetProgram(string programNamespace)
    {
        return $$"""
using {{programNamespace}};
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

internal class Program
{
    private static async Task Main(string[] args)
    {
        var builder = CreateWebHostBuilder(args);

        var host = builder.Build();

        await host.RunAsync();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
            .UseStartup<Startup>();
}

public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddRazorComponents();
        services.AddDataProtection();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment environment)
    {
        // Configure the HTTP request pipeline.
        if (!environment.IsDevelopment())
        {
            app.UseExceptionHandler("/Error");
            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            app.UseHsts();
        }

        app.UseHttpsRedirection();

        app.UseRouting();

        app.UseStaticFiles();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapRazorComponents<App>();
        });
    }
}    
""";
    }

    private string AppComponent(string componentNamespace)
    {
        return $$"""
// <auto-generated/>
#pragma warning disable 1591
namespace {{componentNamespace}}
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
using {{componentNamespace}};

#line default
#line hidden
#nullable disable
#nullable restore

#line default
#line hidden
#nullable disable
    public partial class App : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<!DOCTYPE html>\r\n");
            __builder.OpenElement(1, "html");
            __builder.AddAttribute(2, "lang", "en");
            __builder.OpenElement(3, "head");
            __builder.AddMarkupContent(4, @"<meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <base href=""/"">
    <link rel=""icon"" type=""image/png"" href=""favicon.png"">
    ");
            __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Web.HeadOutlet>(5);
            __builder.CloseComponent();
            __builder.CloseElement();
            __builder.AddMarkupContent(6, "\r\n");
            __builder.OpenElement(7, "body");
            __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Routing.Router>(8);
            __builder.AddAttribute(9, "AppAssembly", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Reflection.Assembly>(
#nullable restore
                          typeof(App).Assembly

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(10, "Found", (global::Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>)((routeData) => (__builder2) => {
                __builder2.OpenComponent<global::Microsoft.AspNetCore.Components.RouteView>(11);
                __builder2.AddAttribute(12, "RouteData", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::Microsoft.AspNetCore.Components.RouteData>(
#nullable restore
                                   routeData

#line default
#line hidden
#nullable disable
                )));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(13, "\r\n            ");
                __builder2.OpenComponent<global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate>(14);
                __builder2.AddAttribute(15, "RouteData", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::Microsoft.AspNetCore.Components.RouteData>(
#nullable restore
                                         routeData

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(16, "Selector", (object)("h1"));
                __builder2.CloseComponent();
            }
            ));
            __builder.AddAttribute(17, "NotFound", (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<global::Microsoft.AspNetCore.Components.Web.PageTitle>(18);
                __builder2.AddAttribute(19, "ChildContent", (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(20, "Not found");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(21, "\r\n            ");
            }
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(26, "\r\n\r\n    ");
            __builder.AddMarkupContent(27, @"<div id=""blazor-error-ui""><environment include=""Staging,Production"">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include=""Development"">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href class=""reload"">Reload</a>
        <a class=""dismiss"">ðŸ—™</a></div>

    ");
            __builder.OpenElement(28, "script");
            __builder.AddAttribute(29, "src", "_framework/blazor.web.js");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
    }
}
#pragma warning restore 1591
""";
    }

    private string TestComponent(string componentNamespace, string componentName, string route = null, string renderMode = null)
    {
        return $$"""
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.Rendering;

namespace {{componentNamespace}};

{{(route == null ? "" : route)}}
{{(renderMode == null ? "" : renderMode)}}
public class {{componentName}} : ComponentBase
{
    protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
    {
        __builder.AddMarkupContent(0, "<h1>{{componentName}}</h1>");
    }
}
""";
    }
}
